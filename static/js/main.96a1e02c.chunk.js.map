{"version":3,"sources":["img/logo.png","components/ui/Header.js","components/character/CharacterItem.js","img/spinner.gif","components/ui/Spinner.js","components/character/CharacterGrid.js","components/searchcharacter/SearchCharacter.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","src","logo","alt","CharacterItem","item","img","name","portrayed","birthday","occupation","status","appearance","Spinner","spinner","style","width","margin","display","CharacterGrid","isLoading","items","map","char_id","SearchCharacter","sendQueryToApp","useState","searchitem","setSearchItem","type","placeholder","autoFocus","value","onChange","e","namechange","target","App","setItems","loading","setLoading","query","setQuery","useEffect","a","axios","result","console","log","data","fetchItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAAe,MAA0B,iC,eCc1BA,EAVA,WACX,OACI,8BACI,wBAAQC,UAAU,SAAlB,SACI,qBAAKC,IAAOC,EAAMC,IAAI,U,KCiCvBC,MAtCf,YAAgC,IAARC,EAAO,EAAPA,KAOpB,OACI,qBAAKL,UAAU,OAAf,SACI,sBAAKA,UAAU,aAAf,UACI,qBAAKA,UAAU,aAAf,SACI,qBAAKC,IAAKI,EAAKC,IAAKH,IAAK,QAE7B,sBAAKH,UAAU,YAAf,UACI,6BAAKK,EAAKE,OACV,+BACI,+BACI,kDADJ,IACmCF,EAAKG,aAExC,+BACI,4CADJ,IAC6BH,EAAKI,YAElC,+BACI,kDADJ,IACmCJ,EAAKK,cAExC,+BACI,4DADJ,IAC6CL,EAAKM,UAElD,+BACI,kDADJ,IACmCN,EAAKO,0BChCjD,MAA0B,oCCe1BC,EAZC,WACZ,OACI,8BACI,qBACIZ,IAAOa,EACPC,MAAS,CAACC,MAAO,QAASC,OAAQ,OAAQC,QAAQ,SAClDf,IAAI,eCaLgB,EAjBO,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,UAAUC,EAAW,EAAXA,MAI9B,OAAOD,EAAa,cAAC,EAAD,IAAe,yBAASpB,UAAU,QAAnB,SAK9BqB,EAAMC,KAAI,SAAAjB,GAAI,OAGX,aAFA,CAEC,EAAD,CAAkCA,KAAQA,GAAtBA,EAAKkB,eC8CtBC,G,MA5DS,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,eAAoB,EAENC,mBAAS,IAFH,mBAEnCC,EAFmC,KAEvBC,EAFuB,KAgB1C,OACI,8BACI,yBAAS5B,UAAU,SAAnB,SACI,+BACI,uBACI6B,KAAO,OACP7B,UAAY,eAEZ8B,YAAY,4BACZC,WAAS,EAMTC,MAASL,EAMTM,SAAY,SAACC,GAAD,OA3BdC,EA2B8BD,EAAEE,OAAOJ,MAzBrDJ,EAAcO,QAEdV,EAAeU,GAJF,IAACA,a,uBCsDPE,MA7Cf,WAAe,MAEaX,mBAAS,IAFtB,mBAENL,EAFM,KAECiB,EAFD,OAIiBZ,oBAAS,GAJ1B,mBAINa,EAJM,KAIGC,EAJH,OAMad,mBAAS,IANtB,mBAMNe,EANM,KAMCC,EAND,KAiCb,OAtBAC,qBAAU,YACO,uCAAG,4BAAAC,EAAA,sEAQKC,IAAM,kDAAD,OAAmDJ,IAR7D,OAQVK,EARU,OAShBC,QAAQC,IAAI,kBAAkBF,EAAOG,MAErCX,EAASQ,EAAOG,MAEhBT,GAAW,GAbK,2CAAH,qDAgBfU,KAEC,CAACT,IAIF,sBAAKzC,UAAU,MAAf,UACE,cAAC,EAAD,IAGA,cAAC,EAAD,CAAiByB,eAAkB,SAACU,GAAD,OAAgBO,EAASP,MAE5D,cAAC,EAAD,CAAef,UAAamB,EAASlB,MAAOA,QClDnC8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.96a1e02c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.e6ecab44.png\";","import React from 'react'\nimport logo from \"../../img/logo.png\"\nimport \"./Header.css\";\n\nconst Header = () => {\n    return (\n        <div>\n            <header className='center'>\n                <img src = {logo} alt=''/>\n            </header>\n        </div>\n    )\n}\n\nexport default Header;\n","import React from 'react'\nimport './CharacterGrid.css';\n\nfunction CharacterItem({item}) {\n    // console.log(item);\n    // return (\n    //     <div>\n    //         {item.occupation}\n    //     </div>\n    // )\n    return (\n        <div className=\"card\">\n            <div className=\"card-inner\">\n                <div className=\"card-front\">\n                    <img src={item.img} alt =' '/>\n                </div>\n                <div className=\"card-back\">\n                    <h1>{item.name}</h1>\n                    <ul>\n                        <li>\n                            <strong> Actor Name:</strong> {item.portrayed}\n                        </li>\n                        <li>\n                            <strong> DOB: </strong> {item.birthday}\n                        </li>\n                        <li>\n                            <strong>Occupation: </strong> {item.occupation}\n                        </li>\n                        <li>\n                            <strong>status in the series: </strong> {item.status}\n                        </li>\n                        <li>\n                            <strong>Appearance: </strong> {item.appearance}\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CharacterItem;\n","export default __webpack_public_path__ + \"static/media/spinner.11d9cde8.gif\";","import React from 'react'\nimport spinner from \"../../img/spinner.gif\"\n\nconst Spinner = () => {\n    return (\n        <div>\n            <img \n                src = {spinner}\n                style = {{width: '200px', margin: 'auto', display:'block'}}\n                alt=\"Loading\"\n            />\n        </div>\n    )\n}\n\nexport default Spinner\n","import React from 'react'\nimport \"./CharacterGrid.css\";\nimport CharacterItem from \"./CharacterItem\";\nimport Spinner from \"../ui/Spinner\"\n\nconst CharacterGrid = ({isLoading,items}) => {\n    // check if it is still loading\n    // if it is still loading then display a spinner\n    // else loop through the items and display them as cards\n    return isLoading ? (<Spinner/>) : (<section className=\"cards\">\n        {/* loop though the items and fetch each item*/}\n        {/* map creates a react list:  so keyn has to be unique. something like id will id\n        \n        in this api char_id is unique to each item so lets use that*/}\n        {items.map(item => (\n            // <h1 key={item.char_id}>{item.name}</h1>\n            // can be written in seperate folder and pulled here like this\n            <CharacterItem key={item.char_id} item = {item}></CharacterItem>\n        ))}\n    </section>)\n}\n\nexport default CharacterGrid;\n","import React, {useState} from 'react'\nimport \"./SearchCharacter.css\"\n\nconst SearchCharacter = ({sendQueryToApp}) => {\n    // initially the search bar  is empty\n    const [searchitem, setSearchItem] = useState('')\n\n\n    /* this function is called when a name is typed in search bar\n    so when the name is typed our state has to change\n    it should set itself to a new name\n    and also when name is changed we goto send that changed name to pur app.js \n    so that it can query with that particular chnaged name*/\n    const onChange = (namechange) => {\n        // this will set the state item with new name\n        setSearchItem(namechange)\n        // will send the new name when ever a event occurs\n        sendQueryToApp(namechange)\n    }\n    return (\n        <div>\n            <section className=\"search\">\n                <form>\n                    <input \n                        type = \"text\"\n                        className = \"form-control\"\n                        // the text you see inside a input field\n                        placeholder=\"Search Your Fav Character\"\n                        autoFocus\n                        // search bar is a input field.\n                        //  it will hold some value\n                        //  adding value to the searchbar is a event which changes\n                        //  so we can use stacte to keep track of the change\n                        // and onChange event to identify the change.\n                        value = {searchitem} // initially value is a empty string and will eventually load on\n                        \n                        // check below for actual line ==== >\n                        // onChange = {(e) => setSearchItem(e.target.value)} // when we type something onchange is going to be triggered\n                        // and new value will be set to search item\n\n                        onChange = {(e) => onChange(e.target.value)}\n\n                        // now that we got a value to search . our api should fetch only that value.\n                        // so we will have to query our api \n\n                        // we send value from one component to  other component with props\n                        // we send the value from here to app.js\n\n\n                        /* ====> \n                        onChange = {(e) => setSearchItem(e.target.value)}\n                        above line can be written as this\n                        onChange = {(e) => onChange(e.target.value)}\n                        */\n\n                    />\n                </form>\n            </section>\n            \n        </div>\n    )\n}\n\nexport default SearchCharacter;\n","import Header from \"./components/ui/Header\";\nimport CharacterGrid from \"./components/character/CharacterGrid\";\nimport SearchCharacter from \"./components/searchcharacter/SearchCharacter\"\nimport React, {useState, useEffect} from \"react\";\nimport axios from \"axios\";\nimport './App.css';\n\n\n// =====================================================\n\n/* \n\nhttps://www.breakingbadapi.com/api/\nthe above api will return object of apis\n\nthese object apis is further returned as a array\n\n\n*/\n\n// =========================================================\n\nfunction App() {\n  // This state is for characters\n  const [items, setItems] = useState([]);\n  //  this will say if data is still being fetched or no\n  const [loading, setLoading] = useState(true);\n  // keep track of changing name in search bar\n  const [query, setQuery] = useState('')\n\n  // We make request with useEffects because we want to render before the app starts.\n  // axios returns a promise\n  // to send a request and respoce we use async and await\n  useEffect(() => {\n    const fetchItem = async () => {\n      /*\n      This was without the query string where i would perform search\n      const result = await axios(`https://breakingbadapi.com/api/characters`);\n      console.log(\"The result is: \",result.data);\n      */\n     // this is with the search query\n     // since the name will be changing --> keep a state for it\n      const result = await axios(`https://breakingbadapi.com/api/characters?name=${query}`);\n      console.log(\"The result is: \",result.data);\n      // once we get the data we got to set it\n      setItems(result.data);\n      // once i set the data we will change the setLoading to loaded\n      setLoading(false);\n    }\n    // when we create a async function we got to call it\n    fetchItem();\n    // when ever name changes in search bar = query our event is triggered.\n  }, [query]);\n\n\n  return (\n    <div className=\"App\">\n      <Header/>\n      {/* for Search character information is coming form searchapp to our app */}\n      {/* the changed name will be received by  sendQueryToApp function and will set the state to the received name*/}\n      <SearchCharacter sendQueryToApp = {(namechange) => setQuery(namechange)}/>\n      {/*  for character grid information is going from app to charactergrid */}\n      <CharacterGrid isLoading = {loading} items={items}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}